services:
  rabbitmq:
    container_name: rabbitmq
    build:
      context: .
      dockerfile: ./Dockerfile.rabbitmq
    ports:
      - ${RABBITMQ_PORT}
      - ${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}
    networks:
      - useful-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
  mongodb:
    container_name: mongodb
    image: mongo:7.0.5
    restart: always
    ports:
      - ${MONGO_PORT}
    volumes:
      - ${MONGODB_VOLUME_PATH}/.mongodb-data:/data/db
    networks:
      - useful-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand(\"ping\").ok'", "localhost:${MONGO_PORT}/test", "--quiet"]
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
  mongo-gui:
    container_name: mongo-gui
    image: mongo-express:1.0.2-18
    restart: always
    ports:
      - ${ME_PORT}:${ME_PORT}
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_MONGODB_URL: ${ME_CONFIG_MONGODB_URL}
    depends_on:
      mongodb:
        condition: service_healthy
        restart: true
    networks:
      - useful-network
  postgresdb:
    container_name: postgresdb
    image: postgres:16.1
    restart: always
    ports:
      - ${POSTGRES_PORT}
    volumes:
      - ${POSGRESDB_VOLUME_PATH}/.postgresdb-data:/var/lib/postgresql/data
      - ./init-postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - useful-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
  postgres-gui:
    image: dpage/pgadmin4:8.2
    container_name: postgres-gui
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    ports:
      - ${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      mongodb:
        condition: service_healthy
        restart: true
    networks:
      - useful-network
  redis:
    container_name: redis
    image: redis:7.2.4
    restart: always
    ports:
      - ${REDIS_PORT}
    networks:
      - useful-network
    volumes:
      - redis_data_container:/var/lib/redis/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - 1025:${MAILHOG_SMTP_PORT}
      - 8025:${MAILHOG_HTTP_PORT}
    networks:
      - useful-network

networks:
  useful-network:
    name: useful-network
    driver: bridge

volumes:
  redis_data_container:
  pgadmin_data:
